transform = (pos, scale, angle, vertex -> 
    cosT: Cos(angle), sinT: Sin(angle)
    {
        x: pos.x + cosT * scale.x * vertex.x - sinT * scale.y * vertex.y
        y: pos.y + sinT * scale.x * vertex.x + cosT * scale.y * vertex.y
    }
)

shape = {
    pos: {x:0, y:0}
    scale: {x:1, y:1}
    angle: 0
    globalPos: (p -> transform(@pos, @scale, @angle, p))
}

mid = (a, b -> {x: (a.x + b.x)*0.5, y: (a.y + b.y)*0.5})
mid3 = (a, b, c -> {x: (a.x + b.x + c.x)/3.0, y: (a.y + b.y + c.y)/3.0})

moved = (pos, dx, dy -> {x: pos.x + dx, y: pos.y + dy})

vec2 = (x, y -> {x: x, y: y})
x2 = (v -> {x: v, y: v})

add = (p, q -> {x: p.x + q.x, y:p.y + q.y})
sub = (p, q -> {x: p.x - q.x, y:p.y - q.y})

mul = (v, a -> {x: v.x * a, y: v.y * a})
div = (v, a -> {x: v.x / a, y: v.y / a})

lerp = (p0, p1, t -> add(p0, mul(sub(p1, p0), t)))

sqrt = (x -> x^0.5)

length = (v -> sqrt(v.x*v.x + v.y*v.y))
setLength = (v, l -> mul(div(v, length(v)), l))

rgb = (r, g, b -> {r: r, g: g, b: b})

square = shape{
    polygon: [
        {x: -0.5, y: -0.5}, {x: +0.5, y: -0.5}, {x: +0.5, y: +0.5}, {x: -0.5, y: +0.5}
    ]
    topLeft:     (->globalPos( polygon[0] ))
    topRight:    (->globalPos( polygon[1] ))
    bottomRight: (->globalPos( polygon[2] ))
    bottomLeft:  (->globalPos( polygon[3] ))
    top:         (->globalPos( mid(polygon[0], polygon[1]) ))
    bottom:      (->globalPos( mid(polygon[2], polygon[3]) ))
    left:        (->globalPos( mid(polygon[0], polygon[3]) ))
    right:       (->globalPos( mid(polygon[1], polygon[2]) ))
    center:      (->globalPos( mid(top(), bottom()) ))
}

triangle = shape{
    polygon: [
        {x: 0, y: -0.5773502691896}
        {x: 0.5, y: 0.2886751345948}
        {x: -0.5, y: 0.2886751345948}
    ]
    p: (index -> globalPos( polygon[index] ))
    p0: (->globalPos( polygon[0] ))
    p1: (->globalPos( polygon[1] ))
    p2: (->globalPos( polygon[2] ))
    top:         (->globalPos( polygon[0] ))
    bottom:      (->globalPos( mid(polygon[1], polygon[2]) ))
    left:        (->globalPos( polygon[2] ))
    right:       (->globalPos( polygon[1] ))
    center:      (->globalPos( mid3(polygon[0], polygon[1], polygon[2]) ))
}

hexagon = shape{
    r = 0.5
    polygon: for i in 0:5 list(
        vec2(r*Cos(60*i), r*Sin(60*i))
    )
}

contact = (p1, p2 -> (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y) == 0)
distant = (p, q, dist -> (p.x - q.x)*(p.x - q.x) + (p.y - q.y)*(p.y - q.y) == dist*dist)

parallel = (l1, l2 -> (l1[1].y - l1[0].y)*(l2[1].x - l2[0].x) == (l1[1].x - l1[0].x)*(l2[1].y - l2[0].y))
