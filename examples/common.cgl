Transform = (pos, scale, angle, vertex -> 
    cosT: Cos(angle), sinT: Sin(angle)
    {
        x: pos.x + cosT * scale.x * vertex.x - sinT * scale.y * vertex.y
        y: pos.y + sinT * scale.x * vertex.x + cosT * scale.y * vertex.y
    }
)

Shape = {
    pos: {x:0, y:0}
    scale: {x:1, y:1}
    angle: 0
    globalPos: (p -> Transform(@pos, @scale, @angle, p))
    globalShape: (s -> TransformShape(@pos, @scale, @angle, s))
}

Mid = (a, b -> {x: (a.x + b.x)*0.5, y: (a.y + b.y)*0.5})
Mid3 = (a, b, c -> {x: (a.x + b.x + c.x)/3.0, y: (a.y + b.y + c.y)/3.0})

Moved = (pos, dx, dy -> {x: pos.x + dx, y: pos.y + dy})

Vec2 = (x, y -> {x: x, y: y})
X2 = (v -> {x: v, y: v})

Add = (p, q -> {x: p.x + q.x, y:p.y + q.y})
Sub = (p, q -> {x: p.x - q.x, y:p.y - q.y})

Mul = (v, a -> {x: v.x * a, y: v.y * a})
Div = (v, a -> {x: v.x / a, y: v.y / a})

Lerp = (p0, p1, t -> Add(p0, Mul(Sub(p1, p0), t)))

Sqrt = (x -> x^0.5)

Length = (v -> Sqrt(v.x*v.x + v.y*v.y))
SetLength = (v, l -> Mul(Div(v, Length(v)), l))

LineLength = (l -> ((l[1].x - l[0].x)^2 + (l[1].y - l[0].y)^2)^0.5)

Rgb = (r, g, b -> {r: r, g: g, b: b})

Contact = (p1, p2 -> (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y) == 0)
Distant = (p, q, dist -> (p.x - q.x)*(p.x - q.x) + (p.y - q.y)*(p.y - q.y) == dist*dist)

Parallel = (l1, l2 -> (l1[1].y - l1[0].y)*(l2[1].x - l2[0].x) == (l1[1].x - l1[0].x)*(l2[1].y - l2[0].y))

Square = Shape{
    polygon: [
        {x: -0.5, y: -0.5}, {x: +0.5, y: -0.5}
        {x: +0.5, y: +0.5}, {x: -0.5, y: +0.5}
    ]
    topLeft:     (->globalPos( @polygon[0] ))
    topRight:    (->globalPos( @polygon[1] ))
    bottomRight: (->globalPos( @polygon[2] ))
    bottomLeft:  (->globalPos( @polygon[3] ))
    top:         (->globalPos( Mid(@polygon[0], @polygon[1]) ))
    bottom:      (->globalPos( Mid(@polygon[2], @polygon[3]) ))
    left:        (->globalPos( Mid(@polygon[0], @polygon[3]) ))
    right:       (->globalPos( Mid(@polygon[1], @polygon[2]) ))
    center:      (->Mid(top(), bottom()))
    topEdge:     (->globalShape( Shape{line:[@polygon[0], @polygon[1]]} ))
    bottomEdge:  (->globalShape( Shape{line:[@polygon[2], @polygon[3]]} ))
    leftEdge:    (->globalShape( Shape{line:[@polygon[0], @polygon[3]]} ))
    rightEdge:   (->globalShape( Shape{line:[@polygon[1], @polygon[2]]} ))
}

Triangle = Shape{
    polygon: [
        {x: 0, y: -0.5773502691896}
        {x: 0.5, y: 0.2886751345948}
        {x: -0.5, y: 0.2886751345948}
    ]
    p: (index -> globalPos( polygon[index] ))
    p0: (->globalPos( polygon[0] ))
    p1: (->globalPos( polygon[1] ))
    p2: (->globalPos( polygon[2] ))
    top:         (->globalPos( polygon[0] ))
    bottomRight: (->globalPos( polygon[1] ))
    bottomLeft:  (->globalPos( polygon[2] ))
    bottom:      (->globalPos( Mid(polygon[1], polygon[2]) ))
    left:        (->globalPos( polygon[2] ))
    right:       (->globalPos( polygon[1] ))
    center:      (->globalPos( Mid3(polygon[0], polygon[1], polygon[2]) ))
    bottomEdge:  (->[p2(), p1()])
}

Hexagon = Shape{
    r = 0.5
    polygon: for i in 0:5 list(
        Vec2(r*Cos(60*i), r*Sin(60*i))
    )
    p: (index -> globalPos( polygon[index] ))
}

MakeCircle = (quality -> Shape{
    r = 0.5
    delta = 360.0 / quality
    polygon: for i in 0:quality list(
        currentAngle = delta*i
        Vec2(r*Cos(currentAngle), r*Sin(currentAngle))
    )
})

Circle = MakeCircle(100)

Arrow = Shape{
    body: Square{scale = Vec2(20, 200), sat(Contact(bottom(), Vec2(0, 0))), var(pos)}
    head: Triangle{scale = Vec2(50, 50), sat(Contact(bottom(), body.top())), var(pos)}
    begin: (->globalPos(body.bottom()))
    end: (->globalPos(head.top()))
    beginLine: (->globalShape(body.bottomEdge()))
}

Line = (p1, p2 -> Shape{line: [p1, p2]})

Dot = (a, b -> a.x*b.x + a.y*b.y)
Cross = (a, b -> a.x*b.y - a.y*b.x)

Screen = Square{
    scale: Vec2(2000, 2000)
}

GC()
