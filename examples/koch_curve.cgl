div3 = (p, q -> {x: (q.x - p.x) / 3.0, y: (q.y - p.y) / 3.0})

koch_template = (p, q ->
    v = Sub(p, q)
    n = {x: -v.y, y: v.x}
    vby3 = div3(p, q)
    m = Div(Add(p, q), 2.0)
    nby3 = SetLength(n, 0.5*Sqrt(3.0)*length(vby3))
    m1 = Add(p, vby3)
    m2 = Add(m1, vby3)
    ps = [p, m1, Add(m, nby3), m2, q]
    [[ps[0], ps[1]], [ps[1], ps[2]], [ps[2], ps[3]], [ps[3], ps[4]]]
)

rec_curve = (f, depth, template, ps -> 
    if depth == 0
    then {
        line: ps
    }
    else {
        ss = template(ps[0], ps[1])
        b: [
            f(f, depth-1, template, ss[0])
            f(f, depth-1, template, ss[1])
            f(f, depth-1, template, ss[2])
            f(f, depth-1, template, ss[3])
        ]
    }
)

curve = (depth -> Shape{
    a: Shape{
        c: rec_curve(rec_curve, depth, koch_template, [{x:0,y:0}, {x:10,y:0}])
        scale = X2(70)
    }
    stroke: Rgb(0, 0, 0)
})

snowflake = (depth -> Shape{
    tri = Square{scale = {x: 10, y: 10}}
    a: Shape{
        l: [
            rec_curve(rec_curve, depth, koch_template, [tri.topLeft(), tri.topRight()])
            rec_curve(rec_curve, depth, koch_template, [tri.topRight(), tri.bottomRight()])
            rec_curve(rec_curve, depth, koch_template, [tri.bottomRight(), tri.bottomLeft()])
            rec_curve(rec_curve, depth, koch_template, [tri.bottomLeft(), tri.topLeft()])
        ]
        scale = X2(70)
    }
    stroke: Rgb(0, 0, 0)
})

main = snowflake(5){
    angle = 45
}