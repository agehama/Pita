import "common.cgl"

div3 = (p, q -> {x: (q.x - p.x) / 3.0, y: (q.y - p.y) / 3.0})

koch_template = (p, q ->
    v = sub(p, q)
    n = {x: -v.y, y: v.x}
    vby3 = div3(p, q)
    m = div(add(p, q), 2.0)
    nby3 = setLength(n, 0.5*sqrt(3.0)*length(vby3))
    m1 = add(p, vby3)
    m2 = add(m1, vby3)
    ps = [p, m1, add(m, nby3), m2, q]
    [[ps[0], ps[1]], [ps[1], ps[2]], [ps[2], ps[3]], [ps[3], ps[4]]]
)

rec_curve = (f, depth, template, ps -> 
    mergin = 4
    if depth == 0
    then {
        line: ps
    }
    else {
        ss = template(ps[0], ps[1])
        b: [
            f(f, depth-1, template, ss[0])
            f(f, depth-1, template, ss[1])
            f(f, depth-1, template, ss[2])
            f(f, depth-1, template, ss[3])
        ]
    }
)

tree = shape{
    tri = triangle{scale = {x: 10, y: 10}}
    depth =  5
    a: shape{
        l: [
            rec_curve(rec_curve, depth, koch_template, [tri.p0(), tri.p1()])
            rec_curve(rec_curve, depth, koch_template, [tri.p2(), tri.p2()])
            rec_curve(rec_curve, depth, koch_template, [tri.p2(), tri.p0()])
        ]
        scale = x2(70)
    }
    stroke: {r: 91, g: 155, b: 213}
}
