transform = (pos, scale, angle, vertex -> {
    cosT: cos(rad(angle))
    sinT: sin(rad(angle))
    x: pos.x + cosT * scale.x * vertex.x - sinT * scale.y * vertex.y
    y: pos.y + sinT* scale.x * vertex.x + cosT* scale.y * vertex.y
})

shape = {
    pos: {x:0, y:0}
    scale: {x:1, y:1}
    angle: 0
    globalPos: (p->transform(@pos, @scale, @angle, p))
}

m = (a, b -> {x: (a.x + b.x)*0.5, y: (a.y + b.y)*0.5})

moved = (pos, dx, dy -> {x: pos.x + dx, y: pos.y + dy})

vec2 = (x,y->{x:x,y:y})

square = shape{
    polygon: [
        {x: -1, y: -1}, {x: +1, y: -1}, {x: +1, y: +1}, {x: -1, y: +1}
    ]
    topLeft:     (->globalPos( polygon[0] ))
    topRight:    (->globalPos( polygon[1] ))
    bottomRight: (->globalPos( polygon[2] ))
    bottomLeft:  (->globalPos( polygon[3] ))
    top:         (->globalPos( m(polygon[0], polygon[1]) ))
    bottom:      (->globalPos( m(polygon[2], polygon[3]) ))
    left:        (->globalPos( m(polygon[0], polygon[3]) ))
    right:       (->globalPos( m(polygon[1], polygon[2]) ))
}

triangle = shape{
    polygon: [
        {x: 0, y: -0.5773502691896}
        {x: 0.5, y: 0.2886751345948}
        {x: -0.5, y: 0.2886751345948}
    ]
}

hexagon = shape{
    r = 0.5
    polygon: [
        vec2(r*cos(rad(0)),r*sin(rad(0)))
        vec2(r*cos(rad(60)),r*sin(rad(60)))
        vec2(r*cos(rad(120)),r*sin(rad(120)))
        vec2(r*cos(rad(180)),r*sin(rad(180)))
        vec2(r*cos(rad(240)),r*sin(rad(240)))
        vec2(r*cos(rad(300)),r*sin(rad(300)))
    ]
}

route = shape{
    rect = square{scale: {x: 60, y: 30}, pos: {x: 100, y: 100}, angle: 30}
    tri = hexagon{scale: {x:100, y:100}}
    textShape= buildText("図形記述言語Pita"){
    }
    arrow3: functionPath(sin, rad(0), rad(360), 100){
        scale: {x: 2, y:100}
        stroke: {r: 255, g: 128, b: 128}
    }
    result: shape{
        a:deformShapeByPath(textShape, arrow3)
    }
}
