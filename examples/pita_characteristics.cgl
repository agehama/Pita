baseColor = Rgb(245, 245, 245)
mainColor = Rgb(49, 187, 222)

sourceCodeText =
"{
    size = 100
    polygon: [
        {x: 0, y: 0}, {x: size, y: 0}
        {x: size, y: size}, {x: 0, y: size}
    ]
    fill: {r: 49, g: 187, b: 222}
}"

sourceCodeShape = {
    a: Text(sourceCodeText)
}

main = {
    a: Square{scale: X2(300), angle: 45, fill: mainColor, 
        basePos: (->Lerp(topLeft(), bottomRight(), 0.3))}
    b: a{pos: a.topLeft(), fill: mainColor
        sat( Distant(a.top(), bottom(), 10) & Parallel([a.bottom(), a.top()], [a.top(), bottom()]) ), 
        var(pos)}
    c: a{pos: a.topRight(), fill: mainColor
        sat( Distant(a.right(), left(), 10) & Parallel([a.left(), a.right()], [a.right(), left()]) ), 
        var(pos)}
    d: Shape{
        text: Text("構文")
        fill: baseColor
        pos: b.bottomRight()
    }
    e: Shape{
        text: Text("図形演算")
        fill: baseColor
        pos: a.bottomRight()
    }
    f: Shape{
        text: Text("制約処理")
        fill: baseColor
        pos: c.center()
    }
    aOut: Shape{
        line: [a.topLeft(), a.topRight()]
    }
    bOut: Shape{
        line: [b.topLeft(), b.topRight()]
    }
    cOut: Shape{
        line: [c.topLeft(), c.topRight()]
    }

    g: Shape{
        s: Intersect(sourceCodeShape{
            bb = BoundingBox(b)
            tl = bb.topLeft
            br = bb.bottomRight
            pos: Vec2(
                tl.x + (br.x - tl.x)*0.3,
                tl.y + (br.y - tl.y)*0.35)
            scale: X2(0.4)
        }, b)
        fill: baseColor
    }
    h: Shape{
        bens: Shape{
            left = Circle{scale: X2(120)}
            right= left{pos: Vec2(80, 0)}
            s: SymDiff(left, right)
            pos: Lerp(a.topLeft(), a.bottomRight(), 0.6)
        }
        sat(BoundingBox(bens).center.x == a.topLeft().x)
        var(bens.pos.x)
        fill: baseColor
    }
    i: Shape{
        s: Shape{
            ss: []
            for i in -3:3 do(
                index = 3+i
                ss[index] = Square{
                    scale: X2(30)
                    pos: {x: 35*i, y: 0}
                }
                sat( Contact(ss[index].topLeft(), Vec2(ss[index].topLeft().x, 40*Sin(-2*ss[index].topLeft().x))) )
                sat( Contact(ss[index].bottomRight(), Vec2(ss[index].bottomRight().x, 40*Sin(-2*ss[index].bottomRight().x))) )
            )
            for i in -3:2 do(
                index = 3+i
                sat( Contact(ss[index].bottomRight(), ss[index + 1].topLeft()) )
            )
            pos: Lerp(c.topLeft(), c.bottomRight(), 0.6)
            var(ss[*].pos, ss[*].angle)
        }
        sat(BoundingBox(s).center.x == c.topLeft().x)
        var(s.pos.x)
        fill: baseColor
    }

    sat( b.topLeft().x == BoundingBox(d).center.x )
    sat( Distance(bOut, d) == 20.0 )

    sat( a.topLeft().x == BoundingBox(e).center.x )
    sat( Distance(aOut, e) == 20.0 )

    sat( Cmaes(f.pos), c.topLeft().x == BoundingBox(f).center.x )
    sat( Distance(cOut, f) == 20.0 )
    var(d.pos, e.pos, f.pos)
}


main2 = Shape{
    m: main
    l: {
        stroke: baseColor
        fill: baseColor
        ls1= [
            ClosestPoints(m.cOut, m.f)
            ClosestPoints({line: [m.c.topLeft(), m.c.bottomLeft()]}, m.f)

            ClosestPoints(m.aOut, m.e)
            ClosestPoints({line: [m.a.topLeft(), m.a.bottomLeft()]}, m.e)

            ClosestPoints(m.bOut, m.d)
            ClosestPoints({line: [m.b.topLeft(), m.b.bottomLeft()]}, m.d)
        ]
        ls: for i in 0:5 list(
            currentLine = ls1[i].line
            {
                line: [currentLine[0], Lerp(currentLine[0], currentLine[1], 0.75)]
                s: Circle{scale: X2(2.0), pos: line[1]}
            }
        )
    }
}
