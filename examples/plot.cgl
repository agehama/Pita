/*
record1 = {
    a: {xs:[1,2,3]}
    b: [1,2,3]
    c: {xs:[1,2,3]}
    funcA: (->a.xs = a.xs @ [4])
    funcB: (->b = b @ [4])
    funcC: (->Push(c.xs, 4))
}

Print(record1)
record1.funcA()
record1.funcB()
record1.funcC()
Print(record1)
*/


GradationMap = {
    list: []
    add: (c, t -> 
        Push(list, {c:c, t:t})
        Sort(list, (a, b -> a.t < b.t))
    )
    //color: (t -> )
}

/*
Print(GradationMap.list)

GradationMap.add(5,6)
GradationMap.add(1,2)
GradationMap.add(3,4)

Print(GradationMap.list)
*/

map = GradationMap{}
map.add(Rgb(0,0,255), 0.75)
map.add(Rgb(255,0,0), 0.0)
map.add(Rgb(0,255,0), 0.5)
Print(map.list)


/*
Plot = (width, height, data -> Shape{
    minX: data[0].x
    maxX: data[0].x
    minY: data[0].y
    maxY: data[0].y

    for i in 0:Size(data)-1 do(
        if(data[i].x < minX)then(minX = data[i].x)
        if(maxX < data[i].x)then(maxX = data[i].x)
        if(data[i].y < minY)then(minY = data[i].y)
        if(maxY < data[i].y)then(maxY = data[i].y)
    )

    rangeX = maxX - minX
    rangeY = maxY - minY
    margin = 20
    width_ = width - margin*2
    height_ = height - margin*2

    map = (p -> Vec2(width_*(p.x - minX)/rangeX-width_*0.5, height_*(p.y - minY)/rangeY-height_*0.5) )

    frame: Shape{
        s: Square{scale: Vec2(width, height)}
        fill: Rgb(255,255,255)
        stroke: Rgb(0,0,0)
    }
    points: for i in 0:Size(data)-1 list(
        Square{pos: map(data[i]), scale: X2(3), fill: Hsv(Mod(15*i,360),1,1)}
    )

    numOfAxes = 5
    axesX: for i in 0:numOfAxes list(
        t = 1.0*i/numOfAxes
        currentInput = minX + rangeX*t
        x = map(Vec2(currentInput, 0)).x
        basePos = Vec2(x, -height*0.5)
        Shape{
            tick: Square{
                scale: Vec2(1, 10)
                pos: Vec2(x, 0)
                sat(Contact(top(), basePos))
                var(pos.y)
            }
            number: Text(currentInput, 20)
            sat(Contact(Bottom(Buffer(BoundingBox(number), 5)), basePos))
            var(number.pos)
        }
    )
    axesY: for i in 0:numOfAxes list(
        t = 1.0*i/numOfAxes
        currentInput = minY + rangeY*t
        y = map(Vec2(0, currentInput)).y
        basePos = Vec2(width*0.5, y)
        Shape{
            tick: Square{
                scale: Vec2(10, 1)
                pos: Vec2(0, y)
                sat(Contact(right(), basePos))
                var(pos.x)
            }
            number: Text(currentInput, 20)
            sat(Contact(Left(Buffer(BoundingBox(number), 5)), basePos))
            var(number.pos)
        }
    )
})

Plot(500, 500, import "data.cgl")
*/