transform = (pos, scale, angle, vertex -> {
    cosT: cos(angle)
    sinT: sin(angle)
    x: pos.x + cosT * scale.x * vertex.x - sinT * scale.y * vertex.y
    y: pos.y + sinT* scale.x * vertex.x + cosT* scale.y * vertex.y
})

shape = {
    pos: {x:0, y:0}
    scale: {x:1, y:1}
    angle: 0
}

contact = (p, q -> (p.x - q.x)*(p.x - q.x) < 1 & (p.y - q.y)*(p.y - q.y) < 1)

distant = (p, q, dist -> (p.x - q.x)*(p.x - q.x) + (p.y - q.y)*(p.y - q.y) == dist*dist)

kite = shape{
    polygon: [
        {x: 0, y: 0}, {x: 20, y: -20}, {x: 80, y: 0}, {x: 20, y: +20}
    ]
    begin: (->transform(@pos, @scale, @angle, polygon[0]))
    end:   (->transform(@pos, @scale, @angle, polygon[2]))
}

skeleton = (num -> shape{
    ss: []
    for i in 0:num-1 do(
        newKite = kite{pos.x = 100*i}
        ss = ss @ [newKite]
        var(newKite.pos, newKite.angle)
    )
    for i in 0:num-2 do(
        sat( contact(ss[i].end(), ss[i+1].begin()) )
    )
    begin: (->transform(@pos, @scale, @angle, ss[0].begin()))
    end:   (->transform(@pos, @scale, @angle, ss[num-1].end()))
})

skeletonA = skeleton(5)

main = skeletonA{
    sat( contact(begin(), {x: 30, y:200}) )
    sat( contact(end(), {x: 200, y:150}) )
}
