RandomSeed()

getParallelotope = (f, df, xmin, xmax ->
    xmid = (xmin + xmax)*0.5
    divnum = 100
    
    amid = 1.0*(f(xmax) - f(xmin)) / (xmax - xmin)
    amin = amid
    amax = amid

    dx = 1.0*(xmax - xmin) / divnum
    for i in 0:divnum do(
        a = df(xmin + i*dx)
        if(a < amin)then(amin = a)
        if(amax < a)then(amax = a)
    )

    xhalf = xmax - xmid

    ymid = f(xmid)
    ywidth = (amax - amin)*xhalf
    ywidth_half = ywidth*0.5
    
    ycenter_left = ymid - xhalf*amid
    ycenter_right = ymid + xhalf*amid

    Shape{
        polygon: [
            Vec2(xmid - xhalf, ymid - xhalf*amax)
            Vec2(xmid - xhalf, ymid - xhalf*amin)
            Vec2(xmid + xhalf, ymid + xhalf*amax)
            Vec2(xmid + xhalf, ymid + xhalf*amin)
        ]
        width: ywidth
        left: xmin
        right: xmax
    }
)

add = (p, q -> {x: p.x + q.x, y:p.y + q.y})
sub = (p, q -> {x: p.x - q.x, y:p.y - q.y})

mul = (v, a -> {x: v.x * a, y: v.y * a})
div = (v, a -> {x: v.x / a, y: v.y / a})

sqrt = (x -> x^0.5)
length = (v -> Sqrt(v.x*v.x + v.y*v.y))
setLength = (v, l -> Mul(Div(v, length(v)), l))
normalize = (v -> SetLength(v, 1.0))

parallel = (a0, a1, b0, b1 ->
    a = normalize(Sub(a1, a0))
    b = normalize(Sub(b1, b0))
    a.x == -b.x & a.y == -b.y
)

polygons = [
    {x: 0, y: 0}, {x: 10, y: 5}
    {x: 15, y: 10}, {x: 10, y: 20}
    {x: 7, y: 25}, {x: 4, y: 20}
]

randomVec2 = (min, max -> Vec2(Random(min,max), Random(min,max)))

makePoly = (->
    hex1 = Hexagon
    jitter = 0.25
    [
        Add(hex1.polygon[0], randomVec2(-jitter, jitter))
        Add(hex1.polygon[1], randomVec2(-jitter, jitter))
        Add(hex1.polygon[2], randomVec2(-jitter, jitter))
        Add(hex1.polygon[3], randomVec2(-jitter, jitter))
        Add(hex1.polygon[4], randomVec2(-jitter, jitter))
        Add(hex1.polygon[5], randomVec2(-jitter, jitter))
])

hex = Shape{
    polygon: makePoly()
    sat( Cmaes(polygon[4]) & parallel(polygon[0], polygon[1], polygon[3], polygon[4]) )
    sat( parallel(polygon[1], polygon[2], polygon[4], polygon[5]) )
    sat( parallel(polygon[2], polygon[3], polygon[5], polygon[0]) )
    var( polygon[4], polygon[5])
}

main = Shape{
    a: hex{}
    scale: {x: 100, y: 100}
}
